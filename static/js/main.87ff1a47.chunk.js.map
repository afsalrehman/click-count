{"version":3,"sources":["Highscore.js","Application.js","serviceWorker.js","index.js"],"names":["Highscore","this","props","overTen","onClick","onReset","Component","Application","resetCount","e","console","log","setState","count","handleClick","state","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6NAmBeA,E,iLAfP,OAAGC,KAAKC,MAAMC,QAGV,6BACI,oDACA,4BAAQC,QAASH,KAAKC,MAAMG,SAA5B,UAKE,S,GAZMC,aC8CTC,G,kBA3CX,WAAYL,GAAO,IAAD,8BACd,4CAAMA,KAaVM,WAAa,SAACC,GACVC,QAAQC,IAAI,WAAaF,GACzB,EAAKG,SAAS,CACNC,MAAQ,EACRV,SAAU,KAlBJ,EAsBlBW,YAAc,WACV,EAAKF,SAAS,CAACC,MAAO,EAAKE,MAAMF,MAAQ,KApBzC,EAAKE,MAAQ,CACTF,MAAQ,GAJE,E,gFAQCX,EAAOa,GACnBd,KAAKc,MAAMF,MAAQ,IAAMZ,KAAKc,MAAMF,QAAUE,EAAMF,QAAUZ,KAAKc,MAAMZ,SACxEF,KAAKW,SAAS,CAACT,SAAS,M,+BAiBvB,IAAD,OACCU,EAASZ,KAAKc,MAAdF,MACL,OACI,6BACA,kDAAwBA,EAAxB,UACA,kBAAC,EAAD,CACIV,QAAWF,KAAKc,MAAMZ,QACtBE,QAAWJ,KAAKO,aAEpB,8BACA,4BAAQJ,QAAS,SAACK,GAAD,OAAO,EAAKK,gBAA7B,e,GAtCcR,cCQNU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAiBC,SAASC,eAAe,SD2HnD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.87ff1a47.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass Highscore extends Component {\r\n    render(){\r\n        if(this.props.overTen){\r\n      \r\n        return (\r\n            <div>\r\n                <h3>Beat Highscore of 10</h3>  \r\n                <button onClick={this.props.onReset} >Reset</button> \r\n            </div>\r\n        )\r\n\r\n        } else {\r\n           return null;\r\n        }\r\n    }\r\n}\r\n\r\nexport default Highscore;","import React, {Component} from 'react';\r\nimport Highscore from './Highscore';\r\nimport './css/style.css';\r\n\r\nclass Application extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        \r\n        this.state = {\r\n            count : 0\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(props, state){\r\n        if(this.state.count > 10 && this.state.count !== state.count && !this.state.overTen){\r\n            this.setState({overTen: true});\r\n        }\r\n    }\r\n\r\n    resetCount = (e) => {\r\n        console.log(\"Event is\",  e);\r\n        this.setState({\r\n                count : 0,\r\n                overTen : false\r\n            });\r\n    }\r\n\r\n    handleClick = () => {\r\n        this.setState({count: this.state.count + 1});\r\n    }\r\n\r\n\r\n    render(){\r\n        let {count} = this.state;\r\n        return (\r\n            <div>\r\n            <h1>Clicked the button {count} times</h1>\r\n            <Highscore\r\n                overTen = {this.state.overTen}\r\n                onReset = {this.resetCount}\r\n            />\r\n            <span>\r\n            <button onClick={(e) => this.handleClick()} >Click</button>\r\n            </span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Application;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Application from './Application';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Application />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}